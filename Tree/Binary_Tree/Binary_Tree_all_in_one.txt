#include <bits/stdc++.h>
using namespace std;

class node {
    public:
        int data;
        node* left;
        node* right;
    
    node(int d)
    {
        data=d;
        left=NULL;
        right=NULL;
    }
};

node* buildtree()
{
    int d;
    cin>>d;
    if(d==-1)
        return NULL;
    node* root=new node(d);
    root->left=buildtree();
    root->right=buildtree();
    return root;
}

void inorder(node* root)
{
    if(!root)
        return;
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}
void preorder(node* root)
{
    if(!root)
        return;
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}
void postorder(node* root)
{
    if(!root)
        return;
    postorder(root->left);
    postorder(root->right);
    cout<<root->data<<" ";
}

//height of the tree
int height(node* root)
{
    if(!root)
        return 0;
    int ls=height(root->left);
    int rs=height(root->right);
    return max(ls,rs)+1;
}
//BFS traversal(with'\n')_technique1
void BFS(node *root)
{
    int prev_level=0;
    queue<pair<node*,int>>q;//making pair of nodes and their level
    q.push(make_pair(root,0));
    while(!q.empty())
    {
        node* f=q.front().first;
        int curr_level=q.front().second;
        if(prev_level<curr_level)//if level of current node is greater than previous we add new line
        {
            cout<<"\n"<<f->data<<" ";
            prev_level=curr_level;//and previous level changes to current one
        }
        else
            cout<<f->data<<" ";//if current level is same as prev then keep printing nodes
        q.pop();
        if(f->left)
            q.push(make_pair(f->left,curr_level+1));
        if(f->right)
            q.push(make_pair(f->right,curr_level+1));
    }
    return;
}

//BFS traversal(with'\n')_technique2
void BFS2(node* root)
{
    queue<node*>q;
    q.push(root);
    q.push(NULL);
    while(!q.empty())
    {
        node* f=q.front();
        if(f==NULL)
        {
            cout<<endl;
            q.pop();
            if(!q.empty())//if queue is not empty then the elements present inside queue will be of same level,so we push a null after them
                q.push(NULL);
        }
        else
        {
            cout<<f->data<<" ";
            q.pop();
        if(f->left)
            q.push(f->left);
        if(f->right)
            q.push(f->right);
        }
    }
    return;
}
//replacing each node with the sum of its child nodes
//the key point here is: we are updating a node with the sum of its child node but when we will transfer the
//value to its parent node we have to send the sum of child nodes and the node itself so before sending we
//have to store the node value to a temporary node
int sumReplacement(node* root)
{
    if(root==NULL)
        return 0;
        
    if(root->left==NULL && root->right==NULL)//when we reached a leaf node it will be replaced wit its own value
        return root->data;
        
    int temp=root->data;
    root->data=sumReplacement(root->left)+sumReplacement(root->right);
    
    return temp+root->data;
}
//diameter of tree(technique1)- O(n^2)
int diameter(node* root)
{
    if(!root)
        return 0;
    int h1=height(root->left);
    int h2=height(root->right);
    int op1=h1+h2;
    int op2=diameter(root->left);
    int op3=diameter(root->right);
    return max(op1,max(op2,op3));
}
//finding height and diameter both at a time- O(n)
class Pair{
    public:
        int height;
        int diameter;
};

Pair fastDiameter(node* root)
{
    Pair p;
    if(root==NULL)
    {
        p.height=0;
        p.diameter=0;
        return p;
    }
    Pair left=fastDiameter(root->left);
    Pair right=fastDiameter(root->right);
    
    p.height=max(left.height,right.height)+1;
    p.diameter=max((left.height+right.height),max(left.diameter,right.diameter));
    return p;
}

//checking height balanced tree
class HBpair{
  public:
    int height;
    bool balance;
};
HBpair isHeightBalnced(node* root)
{
    HBpair p;
    if(root==NULL)
    {
        p.height=0;
        p.balance=true;
        return p;
    }
    HBpair left=isHeightBalnced(root->left);
    HBpair right=isHeightBalnced(root->right);
    
    p.height=max(left.height,right.height)+1;
    
    if(abs(left.height-right.height)<=1 && left.balance && right.balance)
        p.balance=true;
    else
        p.balance=false;
    return p;
}

//building balanced tree from array
node* buildTreefromArray(int arr[],int s,int e)
{
    if(s>e)
        return NULL;
    
    int mid=(s+e)/2;
    node* root=new node(arr[mid]);//first we start creating tree from mid element as root
    
    //then recursive call for left side and right side of the tree 
    root->left=buildTreefromArray(arr,s,mid-1);
    root->right=buildTreefromArray(arr,mid+1,e);
    
    return root;
}

//building binary tree from given preorder & inorder traversal
node* createTreefromTrav(int *in,int *pre,int s,int e)
{
    static int i=0;
    if(s>e)
        return NULL;
    node *root=new node(pre[i]);//builidng the root node by first element of preorder traversal
    int index=-1;
    for(int j=s;j<=e;j++)
    {
        if(in[j]==pre[i])
        {
            index=j;
            break;
        }
    }
    
    i++;
    
    root->left=createTreefromTrav(in,pre,s,index-1);
    root->right=createTreefromTrav(in,pre,index+1,e);
    
    return root;
}

int main()
{
    //node *root=buildtree();
    //inorder(root);
    //cout<<endl;
    //preorder(root);
    //cout<<endl;
    //postorder(root);
    //cout<<diameter(root);
    //Pair p=fastDiameter(root);
    //cout<<"height: "<<p.height<<" "<<"diameter: "<<p.diameter<<endl;
    //HBpair p=isHeightBalnced(root);
    //(p.balance==true? cout<<"balanced" : cout<<"not balanced");
    //int arr[]={1,2,3,4,5,6,7};
    //int n=sizeof(arr)/sizeof(arr[0]);
    //node* root=buildTreefromArray(arr,0,n-1);
    //sumReplacement(root);
    int in[]={3,2,8,4,1,6,7,5};
    int pre[]={1,2,3,4,8,5,6,7};
    int n=sizeof(in)/sizeof(in[0]);
    node* root=createTreefromTrav(in,pre,0,n-1);
    BFS(root);
    return 0;
}
